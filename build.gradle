buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}
apply plugin: 'forge'

repositories {
    maven {
        name = "OC repo"
        url = "http://maven.cil.li/"
    }
}
sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}
if (System.getenv().BUILD_NUMBER != null)
	ext.buildNumber = System.getenv().BUILD_NUMBER?.toInteger()
else
	ext.buildNumber = 0

version = "0.1.0"
group = "pcl.opendisks"
archivesBaseName = "OpenDisks-MC1.7.10"

dependencies {
    compile "li.cil.oc:OpenComputers:MC1.7.10-1.7.+:dev"
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

    replace "@VERSION@", project.version
	replace "@BUILD@", project.ext.buildNumber
}

version = "${version}.${project.ext.buildNumber}"
jar.manifest = manifest { attributes(
	"FMLCorePlugin": "pcl.opendisks.OpenDisksUnpack",
	"FMLCorePluginContainsFMLMod": "icanhazfmlmodpweeze"
) }
sourceSets.main.java.srcDir("./src/externs/java")

jar.doFirst {
	for (String s : new File("./src/externs/java").list())
		delete new File(sourceSets.main.output.classesDir, s);
}

def curseforge_key = 0
def curse_changlog = "default"
if (project.hasProperty('opensecurity_curseforge_key')) {
	curseforge_key = project.opensecurity_curseforge_key
	curse_changlog = project.changelog
}

apply plugin: 'curseforge'
curse {
	apiKey = curseforge_key
	projectId = "231687"
	releaseType = "release"
	changelog = curse_changlog
	addGameVersion project.minecraft.version
}
processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version + "." + project.ext.buildNumber, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// this is needed for IntelliJ so we don't have to copy over the assets manually every time
idea {
    module {
        outputDir = file('build/classes/main')
    }
}
